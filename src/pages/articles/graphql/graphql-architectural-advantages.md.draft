---
templateKey: article
title: "GraphQL's Greatest Architectural Advantages | A Guide For Data Graph Champions"
date: '2020-01-07T17:04:10-05:00'
updated: '2019-01-07T17:04:10-05:00'
description: >-
  
tags:
  - GatsbyJS
  - SEO
category: GraphQL
image: /img/blog/graphql/graphql-banner.png
published: true
---

Have you ever been in the position where a new technology came out, you tried it out, really liked it, saw a lot of use in it, tried to pitch it to your manager, but it didn't work out?

I've been there.

Once at a previous job, I tried to convince my boss to take a look at Node.js, and he told me "he wasn't interested in running JavaScript- a toy language, on the server". 

Well, it might be one of _the most useful toys_ I've ever invested in learning how to _play with_.

I completely get it though. Your boss' goal is to help your company make money, and new technology has the potential to sabotage that goal. For that reason, the skepticism is well understood and appreciated.

However, GraphQL is no _new technology_. Over the past few years, we've seen companies of all shapes and sizes like [Expedia](https://www.apollographql.com/customers/expediagroup/?utm_source=khalil&utm_medium=article&utm_campaign=graphql_architectural_advantages), [Nerdwallet](https://www.nerdwallet.com/blog/engineering/migrating-redux-graphql-nerdwallet-internship-experience/), and [AirBnb](https://www.youtube.com/watch?utm_campaign=React%2BNewsletter&utm_medium=email&utm_source=React_Newsletter_189&v=pywcFELoU8E) incrementally adopt GraphQL throughout their organizations.

Readers that frequent this blog know that I often look for answers to the more challenging questions in software design and architecture. In this article, we'll discuss **specific architectural advantages** to using GraphQL in your next project or adopting it for an existing one.

We'll talk about:

- The Data Graph: the newest layer in the modern web application stack.
-  How the Data Graph unblocks frontend developers and removes the need for them to rely on backend developers for small UI changes and use cases.

## The Data Graph is a new layer in modern web applications

My personal belief is that you never have to spend time coding infrastructure layer technologies yourself. You should be able to just pick one up off the shelf.

<p class="special-quote"><b>Reference</b>: Based on the <a href="/articles/software-design-architecture/organizing-app-logic/">clean (or hexagonal) architecture</a>, infrastructure layer concerns <i>outer layer</i> concerns like databases, web servers, caches, etc.</p>

I believe pretty strongly in that because I think that our time is much better spent focused on solving application & domain-specific code. 

That begs the question, What would you call data-fetching code? You know, API-plumbing code?

I think that creating RESTful APIs, writing retry, pagination, and caching logic is **infrastructural work** and it's normally the type of work that I hate doing.

I first heard the idea of a **Data Graph** from [Matt DeBergalis](https://twitter.com/debergalis?lang=en), CTO of [Apollo GraphQL](https://www.apollographql.com/docs/?utm_source=khalil&utm_medium=article&utm_campaign=graphql_architectural_advantages) at GraphQL Summit 2019.

The Data Graph is something of a _virtual layer_ that sits inbetween our client-side application and a GraphQL server. It holds **the entirety of a organization's data for fetching, and operations for mutating state within the organization**.

Essentially, the Data Graph is _an organization-wide API mechanism_ for client-side apps to build on top of backend services.

![](/img/blog/graphql/architectural-advantages/data-graph-evolution.svg)

<p class="caption">An illustration that depicts the evolution of an organization's Data Graph over time.</p>

The Data Graph is the missing layer in the modern application stack, designed specifically for frontend developers in order to optimize the work they do on daily basis managing local on a client-side app and remote state in a service-side service.

### Modern front-end application challenges

Every client-side application has the same problems to solve:

  - Define data (data storage)
  - Signal data changes (change detection)
  - React to data changes (data flow)

React, React + Redux, Angular, Vue.js- they all aim to solve address these challenges in their own opinionated manner.

### Working with local and remote state
  
Every front end application also needs to work directly with 2 types of state, and indirectly with 1.

  - Component state (component level - directly)
  - Local state (app level - directly)
  - Remote state (service level - indirectly, behind our app servers)

Traditionally, for React, we'd:

  - Handle component state with Hooks or Class components
  - Use Hooks, Context, or Redux to handle Local state
  - Write logic to update Remote state and then update Local state based on async logic.

Unfortunately, writing that data-fetching logic makes it challenging to keep code tidy. We end up spending precious time working on infrastructural things like retries, caching, pagination, and polling.

### The Data Graph is an infrastructure technology that we delegate several tedious tasks to

<img style="width: 100%;" src="/img/blog/graphql/architectural-advantages/single-service-graph.svg"/>
 

<img style="width: 100%;" src="/img/blog/graphql/architectural-advantages/distributed-graph-features.svg"/>


![](/img/blog/graphql/architectural-advantages/Virtual-Data-Graph.svg)



- Talking point: The Data Graph reduces front-end developers' reliance on backend developers to develop new endpoints for new use cases.
  - Small UI changes where we rip out components or we actually need a little bit more information for components happen quite often. Because this happens so often, and because REST is so rigid, it creates this dependency on the back-end team to make changes to the REST APIs any time we need changes.
    - Depending on the team structure (is it fragmented where the front-end developers are strictly front-end? or are they also full-stack? are your backend developers remote? are they in the office?), this can reduce developer productivity and cause discord between teams.
  - Another problem is, because REST is so rigid, a potential change requirement means either:
    - Adding an entirely new unique endpoint (might not be necessary)
    - Upgrading an endpoint (v1 to v2), now we need to support multiple endpoints
    - Removing an endpoint
    - All of this can be hard to do if multiple client-side experiences rely on the same endpoints.
  - We've tried solving this problem with Backend For Frontend, thinking that if we isolate the scope of a backend service 1 to 1 with a client-side one, it will contain the complexity. 
    - This can be a lot of work to create and maintain your very own server-side app for every client-side app.

- Talking point: Unlike REST, there is one way to communicate reads and writes, which simplifies front-end team and back-end team communication.
  - Supporint point: REST doesn't impose constraints on the way that a RESTful API can be designed. Sometimes, having constraints is a good idea, espcially when enforcing a standard way for APIs to be developed.
    - There's nothing stopping someone from implementing DELETE to behave like the way you would expect a POST or a PUT to behave.

- Talking point: Having a single endpoint encapsulates the complexity of how data is resolved from within the server side, and keeps the client-side on a need-to-know basis.
  - Supporting: Principled GraphQL says an organization should only expose a single Graph to the client. Using Apollo Federation, each service team can build and manage their own GraphQL service, connect it to an Apollo Gateway, and distribute GraphQL operations across the entire enterprise.
    - Aside: In order to understand how to split the Graph, read Conway's Law. 
  - Supporting: This is really remarkable, and it's a common service-oriented problem that we can protect the client-side from even needing to know about.
  - Supporting: This is fundamentally the Open-Closed Principle being applied architecturally.

- Talking point: REST requires documentation to accompany it. With GraphQL, the code _is_ the documentation.
  - Supporting point: Introspection

- Talking point: You can still do service-to-service communication, and there are some valuable use cases, like needing to 
  - Supporting: Service-to-service communication using GraphQL is still advantageous due to introspection, but this is often turned off in production.

- Talking point: The greatest architectural advantages for server-side developers is there is a single contract to maintain, and it reduces risk. 
  - Supporting point: The entire contract for the way data goes in and data comes out of your enterprise can be defined in a single schema, even if you're running a distributed microservice architecture.

- Talking point: GraphQL can be incrementally adopted which means that you can run GraphQL and REST simultaneously.

- Talking point: Modern tooling like Apollo Client can speed up front-end development by handling fetch logic, error logic, retry logic, caching, [optimistic UI](https://www.apollographql.com/docs/react/performance/optimistic-ui/?utm_source=khalil&utm_medium=article&utm_campaign=graphql_architectural_advantages), and other boilerplate data plumbing code- for you.
  - Every front end framework has the same problems to solve:
    - Define data (data storage)
    - Signal that data changes (change detection)
    - React to data changes (data flow)
  - Every front end application also needs to work directly with 2 types of state, and indirectly with 1.
    - Local state (component level - directly)
    - Global state (app level - directly)
    - Remote state (service level - indirectly, behind our app servers)
  - Traditionally, we'd:
    - use React to handle local state of our components through Hooks or Class components
    - use Context or Redux to handle Global state
    - write logic to update remote state and then update local state when the request completes.
      - This happens to be where a large majority of the work lies.
  - For Apollo, the Data Graph encapsulates both Global and Remote state. 
    - How: 

